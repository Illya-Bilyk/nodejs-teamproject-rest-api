{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "DrinkMaster V1 API docs",
    "description": "API documentation for Team project 'DrinkMaster' team 4. [Backend github repository](https://github.com/...) | [Privacy Policy](https://...)",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "https://drinks-whm4.onrender.com" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Users",
      "description": "User endpoints"
    },
    {
      "name": "Filters",
      "description": "Filters endpoints"
    },
    {
      "name": "Drinks",
      "description": "Drinks endpoints"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "User authentication",
        "parameters": [],
        "requestBody": {
          "description": "Authentication's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "403": {
            "description": "Email doesn't exist / Password is wrong",
            "content": {}
          }
        }
      }
    },
    "/auth/signout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Get new pair of tokens (use Bearer {refreshToken} instead of accessToken)",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Object with session's id",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokensRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokensResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid refresh token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": ["Auth"],
        "summary": "Google authentication. WARNING: Works only for sign-in, after registered on front-end (if you're writing your back-end for a SPECIFIC front-end, then you can configure it right to work both for sign-up & sign-in)",
        "responses": {
          "200": {
            "description": "Successful operation (redirect to front-end with accessToken, refreshToken and sid in query). Then use GET /user",
            "content": {}
          },
          "403": {
            "description": "Not registered or registered with postman",
            "content": {}
          }
        }
      }
    },
    "/auth/facebook": {
      "get": {
        "tags": ["Auth"],
        "summary": "Facebook authentication. WARNING: Works only for sign-in, after registered on front-end (if you're writing your back-end for a SPECIFIC front-end, then you can configure it right to work both for sign-up & sign-in)",
        "responses": {
          "200": {
            "description": "Successful operation (redirect to front-end with accessToken, refreshToken and sid in query). Then use GET /user",
            "content": {}
          },
          "403": {
            "description": "Not registered or registered with postman",
            "content": {}
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user info",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update user info",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/users/subscribe": {
      "post": {
        "tags": ["Users"],
        "summary": "Subscribe to newsletters",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/filters/categories": {
      "get": {
        "tags": ["Filters"],
        "summary": "Getting a list of cocktail categories",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/filters/ingredients": {
      "get": {
        "tags": ["Filters"],
        "summary": "Getting the ingredients list",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/filters/glasses": {
      "get": {
        "tags": ["Filters"],
        "summary": "Obtaining a list of containers for serving",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/drinks/mainpage": {
      "get": {
        "tags": ["Drinks"],
        "summary": "Getting cocktails for the main page",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/drinks/popular": {
      "get": {
        "tags": ["Drinks"],
        "summary": "Getting popular cocktails",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/drinks/search": {
      "get": {
        "tags": ["Drinks"],
        "summary": "Getting cocktails by category + ingredient + keyword",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "type": "string",
            "required": "true",
            "default": "1",
            "description": "Current page for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "type": "string",
            "required": "true",
            "default": "9",
            "description": "Number of drinks per page"
          },
          {
            "in": "query",
            "name": "keyword",
            "type": "string",
            "required": "true",
            "default": "Ir",
            "description": "A word from the search bar - Enter the text ..."
          },
          {
            "in": "query",
            "name": "category",
            "type": "string",
            "required": "true",
            "default": "Coffee / Tea",
            "description": "A category from the category drop-down list, or an empty string"
          },
          {
            "in": "query",
            "name": "ingredient",
            "type": "string",
            "required": "true",
            "default": "Sugar",
            "description": "Ingredients from the ingredient drop-down list or an empty string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Users not found (invalid query) / Search query not found (invalid query)",
            "content": {}
          }
        }
      }
    },
    "/drinks/own/add": {
      "post": {
        "tags": ["Drinks"],
        "summary": "Adding your own cocktail",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/drinks/own/remove": {
      "delete": {
        "tags": ["Drinks"],
        "summary": "Deleting your own cocktail",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/drinks/own": {
      "get": {
        "tags": ["Drinks"],
        "summary": "Getting your own cocktails",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/drinks/favorite/add": {
      "post": {
        "tags": ["Drinks"],
        "summary": "Adding a cocktail to favorites",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/drinks/favorite/remove": {
      "delete": {
        "tags": ["Drinks"],
        "summary": "Removing a cocktail from favorites",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/drinks/favorite": {
      "get": {
        "tags": ["Drinks"],
        "summary": "Receiving cocktails from the chosen ones",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Users object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Users not found / Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/drinks/{drinkId}": {
      "get": {
        "tags": ["Drinks"],
        "summary": "Get one cocktail per ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "drinkId",
            "type": "string",
            "required": "true",
            "default": "639b6de9ff77d221f190c51e",
            "description": "ID the selected drink"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetByIDResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Drink not found",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "required": ["username", "birthday", "email", "password"],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User's name",
            "minLength": 2,
            "maxLength": 100,
            "example": "John"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "minLength": 10,
            "maxLength": 10,
            "example": "01/01/2001"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 3,
            "maxLength": 254,
            "example": "test@example.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 6,
            "maxLength": 100,
            "example": "qwerty12"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Session's access token (needed for all requests)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXA"
          },
          "user": {
            "username": {
              "type": "string",
              "description": "User's name",
              "example": "John"
            },
            "birthday": {
              "type": "string",
              "description": "User's birthday",
              "example": "01/01/2001"
            },
            "email": {
              "type": "string",
              "description": "User's email",
              "format": "email",
              "example": "test@example.com"
            },
            "id": {
              "type": "string",
              "description": "User's id",
              "example": "507f1f77bcf86cd799439011"
            }
          }
        }
      },
      "LoginRequest": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 3,
            "maxLength": 254,
            "example": "test@example.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 8,
            "maxLength": 100,
            "example": "qwerty12"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Session's access token (needed for all requests)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXA"
          },
          "refreshToken": {
            "type": "string",
            "description": "Session's refresh token (needed for /auth/refresh)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXB"
          },
          "sid": {
            "type": "string",
            "description": "Session's id (needed for /auth/refresh)",
            "example": "507f1f77bcf86cd799439011"
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "username": {
                "type": "string",
                "description": "User name",
                "example": "John"
              },
              "birthday": {
                "type": "string",
                "description": "User's birthday",
                "example": "01/01/2001"
              },
              "id": {
                "type": "string",
                "description": "User id",
                "example": "507f1f77bcf86cd799439012"
              }
            }
          }
        }
      },
      "RefreshTokensRequest": {
        "type": "object",
        "properties": {
          "sid": {
            "type": "string",
            "description": "Session's ('sid' field after authentication)",
            "example": "507f1f77bcf86cd799439011"
          }
        }
      },
      "RefreshTokensResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXA"
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXB"
          },
          "newSid": {
            "type": "string",
            "description": "New session's id",
            "example": "507f1f77bcf86cd799439011"
          }
        }
      },
      "GetUserInfoRequest": {
        "type": "object"
      },
      "GetUserInfoResponse": {},
      "GetSearchRequest": {
        "type": "object",
        "in": "body",
        "properties": {
          "page": {
            "type": "string",
            "description": "Current page for pagination",
            "example": "1"
          },
          "limit": {
            "type": "string",
            "description": "Number of drinks per page",
            "example": "9"
          },
          "keyword": {
            "type": "string",
            "description": "A word from the search bar - Enter the text ...",
            "example": "Ir"
          },
          "category": {
            "type": "string",
            "description": "A category from the category drop-down list, or an empty string",
            "example": "Coffee / Tea"
          },
          "ingredient": {
            "type": "string",
            "description": "Ingredients from the ingredient drop-down list or an empty string",
            "example": "Sugar"
          }
        }
      },
      "GetSearchResponse": {
        "type": "object",
        "properties": {
          "page": {
            "type": "string",
            "description": "Current page for pagination",
            "example": "1"
          },
          "per_page": {
            "type": "string",
            "description": "Number of drinks per page",
            "example": "9"
          },
          "max_page": {
            "type": "string",
            "description": "The number of drinks in the database according to the query criteria",
            "example": "1"
          },
          "drinks": {
            "type": "array",
            "description": "The array of drinks in the database according to the query criteria",
            "example": [
              {
                "_id": "639b6de9ff77d221f190c508",
                "drink": "Irish Coffee",
                "drinkAlternate": "Sorry, not specified",
                "tags": "IBA,ContemporaryClassic",
                "video": "https://youtu.be/9xwtCHELxMA?si=j9qrBEoFTqqgPVCr",
                "category": "Coffee / Tea",
                "IBA": "Contemporary Classics",
                "alcoholic": "Alcoholic",
                "glass": "Irish coffee cup",
                "description": "Irish Coffee is a classic hot cocktail that combines the richness of coffee with the smoothness of Irish whiskey. It is made by pouring hot coffee into a glass, adding a shot of Irish whiskey, and topping it off with a dollop of whipped cream. The warmth of the drink and the sweetness of the cream make it a comforting and indulgent treat.",
                "instructions": "Heat the coffee, whiskey and sugar; do not boil. Pour into glass and top with cream; serve hot.",
                "instructionsES": "Calienta el café, el whisky y el azúcar; no hierva. Vierta en un vaso y cubra con crema; servir caliente.",
                "instructionsDE": "Kaffee, Whiskey und Zucker erhitzen; nicht kochen lassen. In ein Glas geben und mit Sahne übergießen; heiß servieren.",
                "instructionsFR": "Faire chauffer le café, le whisky et le sucre ; ne pas faire bouillir. Verser dans un verre et garnir de crème; Servir chaud.",
                "instructionsIT": "Riscaldare il caffè, il whisky e lo zucchero; non bollire. Versare nel bicchiere e ricoprire con la panna; servito caldo.",
                "instructionsRU": "Нагрейте кофе, виски и сахар; не кипятить. Перелейте в стакан и украсьте сливками; подавать горячим.",
                "instructionsPL": "Podgrzej kawę, whisky i cukier; nie gotuj. Wlać do szklanki i posypać śmietaną; podawać na gorąco.",
                "instructionsUK": "Розігріти каву, віскі і цукор; не кип'ятити. Перелити в келих і зверху полити кремом; подавати гарячим.",
                "drinkThumb": "https://ftp.goit.study/img/drinkify/recipes/Irish_Coffee.jpg",
                "ingredients": [
                  {
                    "_id": "653e4aacf694b8bfbdce6d78",
                    "title": "Irish whiskey",
                    "measure": "1 1/2 oz ",
                    "ingredientId": "64aebb7f82d96cc69e0eb4c2"
                  },
                  {
                    "_id": "653e4aacf694b8bfbdce6d79",
                    "title": "Coffee",
                    "measure": "8 oz ",
                    "ingredientId": "64aebb7f82d96cc69e0eb4e7"
                  },
                  {
                    "_id": "653e4aacf694b8bfbdce6d7a",
                    "title": "Sugar",
                    "measure": "1 tsp ",
                    "ingredientId": "64aebb7f82d96cc69e0eb4bc"
                  },
                  {
                    "_id": "653e4aacf694b8bfbdce6d7b",
                    "title": "Whipped cream",
                    "measure": "1 tblsp ",
                    "ingredientId": "64f1d5c069d8333cf130fb38"
                  }
                ],
                "shortDescription": "A classic hot cocktail with coffee, Irish whiskey, and whipped cream."
              }
            ]
          }
        }
      },
      "GetByIDResponse": {
        "type": "object",
        "example": [
          {
            "_id": "639b6de9ff77d221f190c51e",
            "drink": "Affair",
            "drinkAlternate": "Sorry, not specified",
            "tags": "OrdinaryDrink,Alcoholic",
            "video": "https://youtu.be/BGTB26zMxjw?si=hgl0lfGa9VgBK9mi",
            "category": "Ordinary Drink",
            "IBA": "Sorry, not specified",
            "alcoholic": "Alcoholic",
            "glass": "Highball glass",
            "description": "Affair is a seductive and sophisticated cocktail that combines a mix of spirits and fruit juices. It is made with vodka, peach schnapps, cranberry juice, and orange juice. The combination of flavors creates a balanced and tantalizing drink that is sure to impress. It is best enjoyed in the company of someone special.",
            "instructions": "Pour schnapps, orange juice, and cranberry juice over ice in a highball glass. Top with club soda and serve.",
            "instructionsES": "Vierta el Schnapps, el jugo de naranja y el jugo de arándano sobre hielo en un vaso alto. Complete con el agua carbonatada y sirva.",
            "instructionsDE": "Gießen Sie Schnaps, Orangensaft und Cranberrysaft über Eis in ein Highball-Glas. Mit Club-Soda überziehen und servieren.",
            "instructionsFR": "Verser le schnaps, le jus d'orange et le jus de canneberge sur de la glace dans un verre highball. Garnir de club soda et servir.",
            "instructionsIT": "Versare la grappa, il succo d'arancia e il succo di mirtillo rosso sul ghiaccio in un bicchiere highball. Completare con la soda club e servire.",
            "instructionsRU": "Налейте шнапс, апельсиновый сок и клюквенный сок со льдом в стакан хайбол. Долейте содовой и подавайте.",
            "instructionsPL": "Wlej sznaps, sok pomarańczowy i sok żurawinowy do lodu w szklance typu highball. Na wierzch z sodą klubową i podawaj.",
            "instructionsUK": "Розлийте шнапс, апельсиновий сік і журавлинний сік з льодом у келих хайбол. Зверху полийте газованою водою та подавайте.",
            "drinkThumb": "https://ftp.goit.study/img/drinkify/recipes/Affair.jpg",
            "ingredients": [
              {
                "_id": "653e988f5e22fd46dc6056d7",
                "title": "Strawberry schnapps",
                "measure": "2 oz ",
                "ingredientId": "64aebb7f82d96cc69e0eb4a9"
              },
              {
                "_id": "653e988f5e22fd46dc6056d8",
                "title": "Orange juice",
                "measure": "2 oz ",
                "ingredientId": "64f1d5c069d8333cf130fb3d"
              },
              {
                "_id": "653e988f5e22fd46dc6056d9",
                "title": "Cranberry juice",
                "measure": "2 oz ",
                "ingredientId": "64aebb7f82d96cc69e0eb4f1"
              },
              {
                "_id": "653e988f5e22fd46dc6056da",
                "title": "Club soda",
                "ingredientId": "64f1d5c069d8333cf130fb40"
              }
            ],
            "shortDescription": "A seductive and sophisticated cocktail with a mix of spirits and fruit juices."
          }
        ]
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
